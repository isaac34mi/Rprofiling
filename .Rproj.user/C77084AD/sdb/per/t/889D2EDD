{
    "collab_server" : "",
    "contents" : "####--------------------------------##\n##    Global Function\n\nget_data_types <- function(data){\n  x <- (lapply(data,class))\n  x_frame <- (data.frame(unlist(x)))\n  names(x_frame) <- c(\"Data_Type\")\n  x_frame %>%\n    dplyr::group_by(Data_Type) %>%\n    dplyr::count()\n}\n\n\n###----------------------------------##\n##   Global Function\n\ncreate_html <- function(html){\n  template <- \"<!DOCTYPE html>\n  <html lang='en'>\n  <head>\n  <title>Rprofiling</title>\n  <meta charset='utf-8'>\n  <meta name='viewport' content='width=device-width, initial-scale=1'>\n  <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'>\n  <script src='https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js'></script>\n  <script src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js''></script>\n  <style>\n  .table-hover tbody tr:hover td {\n    background-color: #008080;\n    color : white;\n  }\n  </style>\n  </head>\n  <body>\n\n  <div class='container'>\"\n\nend_temp <- \"</div>\n    </body>\n    </html>\"\n\n  html <- stringr::str_c(template, html, end_temp)\n  html <- gsub(\"<table>\", '<table class=\"table table-hover table-bordered\">',html)\n  tempDir <- tempfile()\n  dir.create(tempDir)\n  html_file <- file.path(tempDir, \"report.html\")\n  writeLines(html,html_file)\n  viewer <- getOption(\"viewer\")\n  if (!is.null(viewer)){\n    viewer(html_file)\n    utils::browseURL(html_file)\n  }\n  else\n    utils::browseURL(html_file)\n}\n\n#' Information about datasets\n#'\n#' @param data is the dataset that you want to digest. dataset class must be dataframe or tibble.\n#'\n#' @return Returns information on variables, observation, missing values and uniquness.\n#' @export dsetinfo\n#'\n#' @examples destinfo(mtcars)\ndsetinfo <- function(data){\n    df <- dsetinfo_(data)\n    description <- \"Dataset Information\"\n    res <- knitr::kable(df, format = \"html\",caption = description)\n    create_html(res)\n}\n\ndsetinfo_ <- function(data){\n\n  if(class(data) != \"data.frame\"){\n    return(\"Sorry this function only works for data frames as of now\")\n  }else{\n\n    num_var <- as.character(length(names(data)))\n    num_obs <- nrow(data)\n    t_missing <- sum(!complete.cases(data))\n    t_missing_percentage <- round((sum(!complete.cases(data))/nrow(data) * 100),2)\n    unique_percentage <- format(round(nrow(unique(data))/nrow(data) * 100,2), nsmall=2)\n\n    df <- data.frame(Info = c(\"Number of variables\",\"Number of observation\",\"Total Missing\",\"Total Missing(%)\",\"Unique Row(%)\"),\n                     Value = c(num_var,num_obs,t_missing,paste0(t_missing_percentage,\"%\"),paste0(unique_percentage, \"%\")))\n\n  }\n}\n\n\n#' Information on the variables\n#'\n#' @param data is the dataset that you want to digest. dataset class must be dataframe or tibble.\n#'\n#' @return Returns the count of data_types.\n#' @export var_types\n#'\n#' @examples var_types(mtcars)\nvar_types <- function(data){\n\n  if(class(data) != \"data.frame\"){\n    return(\"Sorry this function only works for data frames as of now\")\n  }else{\n    df  <- data.frame(get_data_types(data))\n    description <- \"Variable Types\"\n    res <- knitr::kable(df, format = \"html\", caption = description)\n    create_html(res)\n    }\n\n}\n\n#' Sample of dataset\n#'\n#' @param data is the dataset that you want to digest. dataset class must be dataframe or tibble.\n#'\n#' @return Returns a sample(20 rows if dataset is more than 20 rows) of the dataset\n#' @export sample_data\n#'\n#' @examples sample_data(mtcars)\nsample_data <- function(data){\n  if(class(data) != \"data.frame\"){\n    return(\"Sorry this function only works for data frames as of now\")\n  }else{\n    data <- head(data,15)\n    description <- \"Data Sample\"\n    res <- knitr::kable(data, format = \"html\",caption = description)\n    create_html(res)\n  }\n}\n#' Summary of dataset\n#'\n#' @param data is the dataset that you want to digest. dataset class must be dataframe or tibble.\n#'\n#' @return Returns a summary of the dataset of each\n#' @export\n#'\n#' @examples data_summary(mtcars)\ndata_summary <- function(data){\n  if(class(data) != \"data.frame\"){\n    return(\"Sorry this function only works for data frames as of now\")\n  }else{\n    data <- summary(data)\n    description <- \"Data Summary\"\n    res <- knitr::kable(data, format = \"html\", caption = description)\n    create_html(res)\n  }\n}\n\n#' Visualization of missing data\n#'\n#' @param data is the dataset that you want to digest. dataset class must be dataframe or tibble.\n#'\n#' @return Return a graph that sows the variables and rows with missing data\n#' @export\n#'\n#' @examples vis_mdata(mtcars)\nvis_mdata <- function(data){\n  if(class(data) != \"data.frame\"){\n    return(\"Sorry this function only works for data frames as of now\")\n  }else{\n\n    Amelia::missmap(data,main=\"Visualization of missing Data\",y.cex = 0.9, x.cex = 0.9)\n  }\n}\n\n\n#' Generates full profile of the dataframe passed\n#'\n#' @param data is the dataset that you want to digest. dataset class must be dataframe or tibble.\n#'\n#' @return Returns a full digestion(profile) of the data\n#' @export\n#'\n#' @examples full_profile(mtcars)\nfull_profile <- function(data){\n  info <- knitr::kable(x = dsetinfo_(data), format = \"html\", caption = \"Dataset Information\")\n  x <- get_data_types(data)\n  var <- knitr::kable(x,format = \"html\", caption = \"Variable Types\")\n  d_summary <- knitr::kable(summary(data), format = \"html\", caption = \"Data Summary\")\n  samp <- knitr::kable(x=head(data,20),format = \"html\", caption = \"Data Sample\")\n  #png(\"missing.png\")\n  Amelia::missmap(data,main=\"Visualization of missing Data\",y.cex = 0.9, x.cex = 0.9)\n # dev.off()\n  img <- \"<strong>Check your 'Plots tab for the graph'</strong>\"\n\n  res <- paste(info,var,d_summary,samp,\"Graph of missing Values\", img,sep=\"<hr>\")\n  create_html(res)\n\n}\n",
    "created" : 1496356490252.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1279697623",
    "id" : "889D2EDD",
    "lastKnownWriteTime" : 1496372945,
    "last_content_update" : -2147483648,
    "path" : "C:/Users/itett/Desktop/Rprofiling/R/prof.R",
    "project_path" : "R/prof.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}